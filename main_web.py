#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Predicci√≥n de Fallas de Frenos usando Regresi√≥n Log√≠stica - VERSI√ìN WEB
Implementaci√≥n siguiendo la metodolog√≠a CRISP-DM con API REST

Autor: [Tu Nombre]
Fecha: [Fecha]
"""

# Importaci√≥n de librer√≠as necesarias
import pandas as pd
import numpy as np
import pickle
import os
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional
import uvicorn

# Crear aplicaci√≥n FastAPI
app = FastAPI(
    title="üöó API de Predicci√≥n de Fallas de Frenos",
    description="API para predecir fallas de frenos usando Regresi√≥n Log√≠stica y metodolog√≠a CRISP-DM",
    version="1.0.0"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Modelo de datos para la API
class VehiculoInput(BaseModel):
    kms_recorridos: int
    a√±os_uso: int
    ultima_revision: int
    temperatura_frenos: int
    cambios_pastillas: int
    estilo_conduccion: int
    carga_promedio: int
    luz_alarma_freno: int

class PrediccionResponse(BaseModel):
    prediccion: int
    probabilidad_falla: float
    probabilidad_no_falla: float
    riesgo: str
    recomendaciones: List[str]

# Variables globales para el modelo
model = None
scaler = None
feature_names = None

def cargar_modelo():
    """Cargar el modelo entrenado y el scaler"""
    global model, scaler, feature_names
    
    try:
        # Verificar si existen archivos del modelo
        if os.path.exists('modelo_frenos.pkl') and os.path.exists('scaler_frenos.pkl'):
            # Cargar modelo y scaler guardados
            with open('modelo_frenos.pkl', 'rb') as f:
                model = pickle.load(f)
            with open('scaler_frenos.pkl', 'rb') as f:
                scaler = pickle.load(f)
            with open('feature_names.pkl', 'rb') as f:
                feature_names = pickle.load(f)
            print("‚úÖ Modelo cargado desde archivos guardados")
        else:
            # Entrenar modelo desde cero
            print("üîÑ Entrenando modelo desde cero...")
            entrenar_modelo()
            
    except Exception as e:
        print(f"‚ùå Error al cargar el modelo: {e}")
        # Entrenar modelo desde cero como respaldo
        entrenar_modelo()

def entrenar_modelo():
    """Entrenar el modelo de regresi√≥n log√≠stica"""
    global model, scaler, feature_names
    
    try:
        from sklearn.model_selection import train_test_split
        from sklearn.linear_model import LogisticRegression
        from sklearn.preprocessing import StandardScaler
        
        print("üìä Cargando y procesando datos...")
        
        # Cargar datos
        df = cargar_datos()
        
        # Preparar datos
        X = df.drop('falla_frenos', axis=1)
        y = df['falla_frenos']
        
        # Escalar variables num√©ricas
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        
        # Dividir datos
        X_train, X_test, y_train, y_test = train_test_split(
            X_scaled, y, test_size=0.3, random_state=42, stratify=y
        )
        
        # Entrenar modelo
        print("ü§ñ Entrenando modelo de regresi√≥n log√≠stica...")
        model = LogisticRegression(random_state=42, max_iter=1000)
        model.fit(X_train, y_train)
        
        # Guardar modelo y scaler
        feature_names = X.columns.tolist()
        
        with open('modelo_frenos.pkl', 'wb') as f:
            pickle.dump(model, f)
        with open('scaler_frenos.pkl', 'wb') as f:
            pickle.dump(scaler, f)
        with open('feature_names.pkl', 'wb') as f:
            pickle.dump(feature_names, f)
            
        print("‚úÖ Modelo entrenado y guardado exitosamente")
        
        # Evaluar modelo
        y_pred = model.predict(X_test)
        accuracy = (y_pred == y_test).mean()
        print(f"üìà Accuracy del modelo: {accuracy*100:.2f}%")
        
    except Exception as e:
        print(f"‚ùå Error al entrenar el modelo: {e}")
        raise HTTPException(status_code=500, detail=f"Error al entrenar el modelo: {str(e)}")

def cargar_datos():
    """Cargar y procesar los datos del CSV"""
    try:
        # Leer el archivo como texto primero para ver su estructura
        with open('falla_frenos.csv', 'r', encoding='utf-8') as file:
            first_line = file.readline().strip()
        
        # Si el archivo tiene comas dentro de comillas, usar separador personalizado
        if ',' in first_line and first_line.count('"') > 0:
            # Leer el archivo y procesar manualmente
            df = pd.read_csv('falla_frenos.csv', header=None)
            
            # La primera fila contiene los nombres de las columnas
            column_names = df.iloc[0, 0].split(',')
            
            # Procesar todas las filas de datos
            data_rows = []
            for idx, row in df.iterrows():
                if idx == 0:  # Saltar la fila de encabezados
                    continue
                # Dividir por comas y limpiar comillas
                values = row.iloc[0].split(',')
                # Convertir a tipos apropiados
                processed_values = []
                for i, val in enumerate(values):
                    val = val.strip().strip('"')
                    processed_values.append(int(val))
                data_rows.append(processed_values)
            
            # Crear DataFrame con los datos procesados
            df = pd.DataFrame(data_rows, columns=column_names)
            
        else:
            # Formato normal de CSV
            df = pd.read_csv('falla_frenos.csv')
        
        print(f"‚úÖ Datos cargados: {df.shape}")
        return df
        
    except Exception as e:
        print(f"‚ùå Error al cargar datos: {e}")
        raise HTTPException(status_code=500, detail=f"Error al cargar datos: {str(e)}")

def predecir_falla_frenos(vehiculo: VehiculoInput):
    """Predecir si un veh√≠culo se quedar√° sin frenos"""
    global model, scaler, feature_names
    
    if model is None or scaler is None:
        raise HTTPException(status_code=500, detail="Modelo no disponible")
    
    try:
        # Crear array con los datos de entrada
        input_data = np.array([[
            vehiculo.kms_recorridos,
            vehiculo.a√±os_uso,
            vehiculo.ultima_revision,
            vehiculo.temperatura_frenos,
            vehiculo.cambios_pastillas,
            vehiculo.estilo_conduccion,
            vehiculo.carga_promedio,
            vehiculo.luz_alarma_freno
        ]])
        
        # Escalar los datos
        input_scaled = scaler.transform(input_data)
        
        # Realizar predicci√≥n
        prediction = model.predict(input_scaled)[0]
        probability = model.predict_proba(input_scaled)[0]
        
        # Determinar nivel de riesgo
        if prediction == 1:
            if probability[1] > 0.8:
                riesgo = "ALTO"
                recomendaciones = [
                    "Revisar sistema de frenos inmediatamente",
                    "Cambiar pastillas de freno si es necesario",
                    "Verificar temperatura de operaci√≥n",
                    "Considerar cambio de estilo de conducci√≥n"
                ]
            else:
                riesgo = "MEDIO"
                recomendaciones = [
                    "Revisar sistema de frenos pronto",
                    "Monitorear indicadores de desgaste",
                    "Programar revisi√≥n en las pr√≥ximas semanas"
                ]
        else:
            if probability[0] > 0.8:
                riesgo = "BAJO"
                recomendaciones = [
                    "Mantener mantenimiento regular",
                    "Continuar con revisiones programadas",
                    "Monitorear indicadores de desgaste"
                ]
            else:
                riesgo = "BAJO-MEDIO"
                recomendaciones = [
                    "Mantener mantenimiento regular",
                    "Monitorear indicadores de desgaste",
                    "Considerar revisi√≥n preventiva"
                ]
        
        return PrediccionResponse(
            prediccion=prediction,
            probabilidad_falla=probability[1],
            probabilidad_no_falla=probability[0],
            riesgo=riesgo,
            recomendaciones=recomendaciones
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error en la predicci√≥n: {str(e)}")

# Endpoints de la API

@app.get("/")
async def root():
    """Endpoint ra√≠z con informaci√≥n de la API"""
    return {
        "mensaje": "üöó API de Predicci√≥n de Fallas de Frenos",
        "version": "1.0.0",
        "descripcion": "API para predecir fallas de frenos usando Regresi√≥n Log√≠stica",
        "endpoints": {
            "/": "Informaci√≥n de la API",
            "/health": "Estado de salud del sistema",
            "/predict": "Realizar predicci√≥n de falla de frenos",
            "/model-info": "Informaci√≥n del modelo entrenado"
        }
    }

@app.get("/health")
async def health_check():
    """Verificar el estado de salud del sistema"""
    try:
        if model is not None and scaler is not None:
            return {
                "status": "healthy",
                "modelo_cargado": True,
                "scaler_cargado": True,
                "mensaje": "‚úÖ Sistema funcionando correctamente"
            }
        else:
            return {
                "status": "initializing",
                "modelo_cargado": False,
                "scaler_cargado": False,
                "mensaje": "üîÑ Sistema inicializando..."
            }
    except Exception as e:
        return {
            "status": "error",
            "error": str(e),
            "mensaje": "‚ùå Error en el sistema"
        }

@app.post("/predict", response_model=PrediccionResponse)
async def predict_falla_frenos(vehiculo: VehiculoInput):
    """Predecir si un veh√≠culo se quedar√° sin frenos"""
    return predecir_falla_frenos(vehiculo)

@app.get("/model-info")
async def model_info():
    """Obtener informaci√≥n del modelo entrenado"""
    try:
        if model is None:
            raise HTTPException(status_code=500, detail="Modelo no disponible")
        
        # Obtener coeficientes del modelo
        coefficients = model.coef_[0]
        
        # Crear informaci√≥n de variables
        variables_info = []
        for i, (name, coef) in enumerate(zip(feature_names, coefficients)):
            variables_info.append({
                "variable": name,
                "coeficiente": float(coef),
                "importancia_absoluta": float(abs(coef)),
                "efecto": "positivo" if coef > 0 else "negativo"
            })
        
        # Ordenar por importancia absoluta
        variables_info.sort(key=lambda x: x["importancia_absoluta"], reverse=True)
        
        return {
            "tipo_modelo": "Regresi√≥n Log√≠stica",
            "variables_entrada": len(feature_names),
            "variables": variables_info,
            "intercepto": float(model.intercept_[0]),
            "clases": model.classes_.tolist()
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error al obtener informaci√≥n del modelo: {str(e)}")

@app.get("/example-prediction")
async def example_prediction():
    """Ejemplo de predicci√≥n con datos de muestra"""
    try:
        # Ejemplo 1: Veh√≠culo con alto riesgo
        vehiculo_alto_riesgo = VehiculoInput(
            kms_recorridos=150000,
            a√±os_uso=12,
            ultima_revision=18,
            temperatura_frenos=95,
            cambios_pastillas=5,
            estilo_conduccion=1,
            carga_promedio=800,
            luz_alarma_freno=1
        )
        
        # Ejemplo 2: Veh√≠culo con bajo riesgo
        vehiculo_bajo_riesgo = VehiculoInput(
            kms_recorridos=25000,
            a√±os_uso=3,
            ultima_revision=6,
            temperatura_frenos=35,
            cambios_pastillas=1,
            estilo_conduccion=0,
            carga_promedio=300,
            luz_alarma_freno=0
        )
        
        prediccion_alto = predecir_falla_frenos(vehiculo_alto_riesgo)
        prediccion_bajo = predecir_falla_frenos(vehiculo_bajo_riesgo)
        
        return {
            "ejemplo_alto_riesgo": {
                "datos_vehiculo": vehiculo_alto_riesgo.dict(),
                "prediccion": prediccion_alto.dict()
            },
            "ejemplo_bajo_riesgo": {
                "datos_vehiculo": vehiculo_bajo_riesgo.dict(),
                "prediccion": prediccion_bajo.dict()
            }
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error en ejemplo de predicci√≥n: {str(e)}")

# Inicializar el modelo al arrancar la aplicaci√≥n
@app.on_event("startup")
async def startup_event():
    """Evento que se ejecuta al arrancar la aplicaci√≥n"""
    print("üöÄ Iniciando API de Predicci√≥n de Fallas de Frenos...")
    cargar_modelo()
    print("‚úÖ API lista para recibir solicitudes")

if __name__ == "__main__":
    # Para desarrollo local
    uvicorn.run(app, host="0.0.0.0", port=8000)
